@page  "/AnnualLeave/Edit/{AnnualLeaveRequestID:int}"

@using AnnualLeaveRequest.Data
@using AnnualLeaveRequest.Models
@using AnnualLeaveRequest.Components
@inject IAnnualLeaveRequestService AnnualLeaveRequestService
@inject NavigationManager NavigationManager

<h2>Edit Annual Leave Request</h2>

@if (!editableRequest)
{
    <div style="color:red; padding-bottom: 20px">
        <ul>
            <li>Cannot update this Annual Leave Request</li>
        </ul>
    </div>

    <div class="form-actions no-color esh-link-list" style="padding-top: 20px">
        @if (model?.AnnualLeaveRequestID > 0)
        {
            <a href="@($"/AnnualLeave/Details/{model.AnnualLeaveRequestID}")" class="esh-link-item">
                Details
            </a>
            <label>|</label>
        }

        <a href="/AnnualLeave/Overview" class="esh-link-item">
            Back to Overview
        </a>
    </div>

    return;
}

<EditForm Model="model" OnValidSubmit="@EditRequest">
    <DataAnnotationsValidator />

    <ErrorMessage ErrorMessages="ErrorMessages" />

    <div class="form-group">
        <label class="control-label col-md-2">Start Date</label>
        <div class="col-md-3">
            <InputDate class="form-control" @bind-Value="model.StartDate" />
            <ValidationMessage For="(() => model.StartDate)" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Return Date</label>
        <div class="col-md-3">
            <InputDate class="form-control" @bind-Value="model.ReturnDate" />
            <ValidationMessage For="(() => model.ReturnDate)" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Number of days requested</label>
        <div class="col-md-3">
            <label style="@(GetNumberOfDaysRequested() > 0 ? "color:black;" : "color:red")" class="control-label col-md-2">@model.NumberOfAnnualLeaveDaysRequested</label>
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Leave to be Paid/Unpaid</label>
        <div class="col-md-3">
            <InputSelect @bind-Value="model.PaidLeaveType" class="form-control">
                <option value="">Please select the Paid Leave Type</option>
                @foreach (var paidLeaveType in PaidLeaveTypes)
                {
                    <option value="@paidLeaveType">@paidLeaveType</option>
                }
            </InputSelect>
            <ValidationMessage For="(() => model.PaidLeaveType)" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Leave to be Paid/Unpaid</label>
        <div class="col-md-3">
            <InputSelect @bind-Value="model.LeaveType" class="form-control">
                <option value="">Please select the Leave Type</option>
                @foreach (var leaveType in LeaveTypes)
                {
                    <option value="@leaveType">@leaveType</option>
                }
            </InputSelect>
            <ValidationMessage For="(() => model.LeaveType)" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Notes</label>
        <div class="col-md-3">
            <InputTextArea class="form-control" @bind-Value="model.Notes" />
            <ValidationMessage For="(() => model.Notes)" />
        </div>
    </div>

    @if (model.NumberOfAnnualLeaveDaysRequested > 0)
    {
        <button type="submit">Submit</button>
    }
</EditForm>

<div class="form-actions no-color esh-link-list" style="padding-top: 20px">
    <a href="@($"/AnnualLeave/Details/{model.AnnualLeaveRequestID}")" class="esh-link-item">
        Details
    </a>
    |
    <a href="/AnnualLeave/Overview" class="esh-link-item">
        Back to Overview
    </a>
</div>

@code {

    [Parameter]
    public int AnnualLeaveRequestID { get; set; }

    protected List<string> ErrorMessages { get; set; }

    private List<string> PaidLeaveTypes = new List<string>()
{
        "Paid",
        "Unpaid"
    }
    .OrderBy(x => x)
    .ToList();

    private List<string> LeaveTypes = new List<string>()
{
        "Annual Leave",
        "Compassionate Leave",
        "Appointment"
    }
    .OrderBy(x => x)
    .ToList();

    private DateTime DateRequested { get; set; }

    private AnnualLeaveRequestOverviewModel model = new AnnualLeaveRequestOverviewModel();

    protected bool editableRequest => model?.AnnualLeaveRequestID > 0 && model.Year >= DateTime.UtcNow.Year;

    protected override void OnInitialized()
    {
        model = AnnualLeaveRequestService.GetRequest(AnnualLeaveRequestID);
    }

    private void EditRequest()
    {
        DateRequested = DateTime.UtcNow;

        model = AnnualLeaveRequestService.Update(model);

        if (string.IsNullOrEmpty(model.ErrorMessage))
        {
            NavigationManager.NavigateTo($"AnnualLeave/Overview/{model.AnnualLeaveRequestID}");
        }
        else
        {
            ErrorMessages = model.ErrorMessage.Split("\\n").ToList();
            ErrorMessages.RemoveAll(x => string.IsNullOrEmpty(x));
        }
    }

    private void BackToOverview()
    {
        NavigationManager.NavigateTo("AnnualLeave/Overview");
    }

    private decimal GetNumberOfDaysRequested()
    {
        model.NumberOfAnnualLeaveDaysRequested = AnnualLeaveRequestService.GetDaysBetweenStartDateAndReturnDate(model.StartDate, model.ReturnDate);
        return model.NumberOfAnnualLeaveDaysRequested;
    }
}
