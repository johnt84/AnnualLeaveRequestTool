@page  "/AnnualLeave/Create"

@inject IAnnualLeaveRequestClient AnnualLeaveRequestClient
@inject NavigationManager NavigationManager

<h2>Create Annual Leave Request</h2>

<EditForm Model="model" OnValidSubmit="@CreateRequestAsync">
    <DataAnnotationsValidator />

    <ErrorMessage ErrorMessages="ErrorMessages" />

    <div class="form-group">
        <label class="control-label col-md-2">Start Date</label>
        <div class="col-md-3">
            <InputDate class="form-control" @bind-Value="model.StartDate" />
            <ValidationMessage For="(() => model.StartDate)" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Return Date</label>
        <div class="col-md-3">
            <InputDate class="form-control" @bind-Value="model.ReturnDate" />
            <ValidationMessage For="(() => model.ReturnDate)" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Leave to be Paid/Unpaid</label>
        <div class="col-md-3">
            <InputSelect @bind-Value="model.PaidLeaveType" class="form-control">
                <option value="">Please select the Paid Leave Type</option>
                @foreach (var paidLeaveType in PaidLeaveTypes)
                {
                    <option value="@paidLeaveType">@paidLeaveType</option>
                }
            </InputSelect>
            <ValidationMessage For="(() => model.PaidLeaveType)" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Leave to be Paid/Unpaid</label>
        <div class="col-md-3">
            <InputSelect @bind-Value="model.LeaveType" class="form-control">
                <option value="">Please select the Leave Type</option>
                @foreach (var leaveType in LeaveTypes)
                {
                    <option value="@leaveType">@leaveType</option>
                }
            </InputSelect>
            <ValidationMessage For="(() => model.LeaveType)" />
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Notes</label>
        <div class="col-md-3">
            <InputTextArea class="form-control" @bind-Value="model.Notes" />
            <ValidationMessage For="(() => model.Notes)" />
        </div>
    </div>

    <button type="submit">Submit</button>
</EditForm>

<div class="form-actions no-color esh-link-list" style="padding-top: 20px">
    <a href="/AnnualLeave/Overview" class="esh-link-item">
        Back to Overview
    </a>
</div>

@code {
    protected List<string> ErrorMessages { get; set; }

    private List<string> PaidLeaveTypes = new List<string>()
{
        "Paid",
        "Unpaid"
    }
    .OrderBy(x => x)
    .ToList();

    private List<string> LeaveTypes = new List<string>()
{
        "Annual Leave",
        "Compassionate Leave",
        "Appointment"
    }
    .OrderBy(x => x)
    .ToList();

    private DateTime DateRequested { get; set; }

    private AnnualLeaveRequestOverviewModel model = new AnnualLeaveRequestOverviewModel();

    private async Task CreateRequestAsync()
    {
        DateRequested = DateTime.UtcNow;

        model = await AnnualLeaveRequestClient.CreateAnnualLeaveRequest(model);

        if (string.IsNullOrEmpty(model.ErrorMessage))
        {
            NavigationManager.NavigateTo($"AnnualLeave/Overview/{model.AnnualLeaveRequestID}");
        }
        else
        {
            ErrorMessages = model.ErrorMessage.Split("\\n").ToList();
            ErrorMessages.RemoveAll(x => string.IsNullOrEmpty(x));
        }
    }

    private void BackToOverview()
    {
        NavigationManager.NavigateTo("AnnualLeave/Overview");
    }
}
